{"ast":null,"code":"import _classCallCheck from \"/Users/michaelrapp/Documents/React/monster_manual/monster_manual/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelrapp/Documents/React/monster_manual/monster_manual/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelrapp/Documents/React/monster_manual/monster_manual/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelrapp/Documents/React/monster_manual/monster_manual/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelrapp/Documents/React/monster_manual/monster_manual/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelrapp/Documents/React/monster_manual/monster_manual/src/components/Grid.js\";\nimport React from \"react\";\nimport SubjectCard from \"./SubjectCard\";\nimport StatBlock from \"./StatBlock\";\nimport ActionBlock from \"./ActionBlock\";\n\nvar Grid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Grid, _React$Component);\n\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));\n\n    _this.getMonster = function (event) {\n      var searchTerm = event.target.value;\n      searchTerm = searchTerm.replace(/\\b\\w/gm, function (char) {\n        return char.toUpperCase();\n      });\n      fetch(\"https://api-beta.open5e.com/monsters/?name=\" + searchTerm).then(function (data) {\n        return data.json();\n      }).then(function (response) {\n        var result = response.results[0];\n\n        if (result) {\n          console.log(result.special_abilities);\n\n          _this.setState({\n            subject: {\n              name: result.name,\n              type: result.type,\n              size: result.size,\n              alignment: result.alignment,\n              baseStats: {\n                ac: result.armor_class,\n                hp: result.hit_points,\n                speed: result.speed\n              },\n              attributes: {\n                strength: result.strength,\n                dexterity: result.dexterity,\n                constitution: result.constitution,\n                intelligence: result.intelligence,\n                wisdom: result.wisdom,\n                charisma: result.charisma\n              },\n              saves: {\n                str: result.strength_save,\n                dex: result.dexterity_save,\n                con: result.constitution_save,\n                int: result.intelligence_save,\n                wis: result.wisdom_save,\n                cha: result.charisma_save\n              },\n              skills: {//todo figure out how to parse out the skills since they are not separated\n              },\n              damageVulnerabilities: result.damage_vulnerabilities ? result.damage_vulnerabilities.split(\", \") : [],\n              damageResistances: result.damage_resistances ? result.damage_resistances.split(\", \") : [],\n              damageImmunities: result.damage_immunities ? result.damage_immunities.split(\", \") : [],\n              conditionImmunities: result.condition_immunities ? result.condition_immunities.split(\", \") : [],\n              senses: result.senses ? result.senses.split(\", \") : [],\n              actions: result.actions ? result.actions : [],\n              legendaryActions: result.legendary_actions ? result.legendary_actions : [],\n              specialAbilities: result.special_abilities ? result.special_abilities : []\n            }\n          });\n        }\n      });\n    };\n\n    _this.state = {\n      subject: {\n        name: null,\n        description: null,\n        type: null,\n        size: null,\n        alignment: null,\n        baseStats: {\n          ac: null,\n          hp: null,\n          speed: null\n        },\n        attributes: {\n          strength: null,\n          dexterity: null,\n          constitution: null,\n          intelligence: null,\n          wisdom: null,\n          charisma: null\n        },\n        saves: {\n          str: null,\n          dex: null,\n          con: null,\n          int: null,\n          wis: null,\n          cha: null\n        },\n        skills: {},\n        damageVulnerabilities: [],\n        damageResistances: [],\n        damageImmunities: [],\n        conditionImmunities: [],\n        senses: [],\n        actions: [],\n        legendaryActions: [],\n        specialAbilities: []\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(SubjectCard, {\n        subject: this.state.subject.name,\n        subjectBody: this.state.subject.description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(StatBlock, {\n        subject: this.state.subject,\n        actions: this.state.subject.actions,\n        legendaryActions: this.state.subject.legendaryActions,\n        specialAbilities: this.state.subject.specialAbilities,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(ActionBlock, {\n        handleSearch: this.getMonster.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Grid;\n}(React.Component);\n\nexport default Grid;","map":{"version":3,"sources":["/Users/michaelrapp/Documents/React/monster_manual/monster_manual/src/components/Grid.js"],"names":["React","SubjectCard","StatBlock","ActionBlock","Grid","props","getMonster","event","searchTerm","target","value","replace","char","toUpperCase","fetch","then","data","json","response","result","results","console","log","special_abilities","setState","subject","name","type","size","alignment","baseStats","ac","armor_class","hp","hit_points","speed","attributes","strength","dexterity","constitution","intelligence","wisdom","charisma","saves","str","strength_save","dex","dexterity_save","con","constitution_save","int","intelligence_save","wis","wisdom_save","cha","charisma_save","skills","damageVulnerabilities","damage_vulnerabilities","split","damageResistances","damage_resistances","damageImmunities","damage_immunities","conditionImmunities","condition_immunities","senses","actions","legendaryActions","legendary_actions","specialAbilities","state","description","bind","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,I;;;;;AA2DF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UAzDnBC,UAyDmB,GAzDN,UAACC,KAAD,EAAW;AACpB,UAAIC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACAF,MAAAA,UAAU,GAAGA,UAAU,CAACG,OAAX,CAAmB,QAAnB,EAA6B,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,WAAL,EAAJ;AAAA,OAAjC,CAAb;AAEAC,MAAAA,KAAK,CAAC,gDAAgDN,UAAjD,CAAL,CACKO,IADL,CACU,UAAAC,IAAI,EAAI;AAAC,eAAOA,IAAI,CAACC,IAAL,EAAP;AAAmB,OADtC,EAEKF,IAFL,CAEU,UAAAG,QAAQ,EAAI;AAEd,YAAMC,MAAM,GAAGD,QAAQ,CAACE,OAAT,CAAiB,CAAjB,CAAf;;AACA,YAAGD,MAAH,EAAU;AACNE,UAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,iBAAnB;;AACA,gBAAKC,QAAL,CACI;AACIC,YAAAA,OAAO,EAAE;AACLC,cAAAA,IAAI,EAAEP,MAAM,CAACO,IADR;AAELC,cAAAA,IAAI,EAAER,MAAM,CAACQ,IAFR;AAGLC,cAAAA,IAAI,EAAET,MAAM,CAACS,IAHR;AAILC,cAAAA,SAAS,EAAEV,MAAM,CAACU,SAJb;AAKLC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,EAAE,EAAEZ,MAAM,CAACa,WADJ;AAEPC,gBAAAA,EAAE,EAAEd,MAAM,CAACe,UAFJ;AAGPC,gBAAAA,KAAK,EAAEhB,MAAM,CAACgB;AAHP,eALN;AAULC,cAAAA,UAAU,EAAE;AACRC,gBAAAA,QAAQ,EAAElB,MAAM,CAACkB,QADT;AAERC,gBAAAA,SAAS,EAAEnB,MAAM,CAACmB,SAFV;AAGRC,gBAAAA,YAAY,EAAEpB,MAAM,CAACoB,YAHb;AAIRC,gBAAAA,YAAY,EAAErB,MAAM,CAACqB,YAJb;AAKRC,gBAAAA,MAAM,EAAEtB,MAAM,CAACsB,MALP;AAMRC,gBAAAA,QAAQ,EAAEvB,MAAM,CAACuB;AANT,eAVP;AAkBLC,cAAAA,KAAK,EAAE;AACHC,gBAAAA,GAAG,EAAEzB,MAAM,CAAC0B,aADT;AAEHC,gBAAAA,GAAG,EAAE3B,MAAM,CAAC4B,cAFT;AAGHC,gBAAAA,GAAG,EAAE7B,MAAM,CAAC8B,iBAHT;AAIHC,gBAAAA,GAAG,EAAE/B,MAAM,CAACgC,iBAJT;AAKHC,gBAAAA,GAAG,EAAEjC,MAAM,CAACkC,WALT;AAMHC,gBAAAA,GAAG,EAAEnC,MAAM,CAACoC;AANT,eAlBF;AA0BLC,cAAAA,MAAM,EAAE,CACJ;AADI,eA1BH;AA6BLC,cAAAA,qBAAqB,EAAEtC,MAAM,CAACuC,sBAAP,GAAgCvC,MAAM,CAACuC,sBAAP,CAA8BC,KAA9B,CAAoC,IAApC,CAAhC,GAA4E,EA7B9F;AA8BLC,cAAAA,iBAAiB,EAAEzC,MAAM,CAAC0C,kBAAP,GAA4B1C,MAAM,CAAC0C,kBAAP,CAA0BF,KAA1B,CAAgC,IAAhC,CAA5B,GAAoE,EA9BlF;AA+BLG,cAAAA,gBAAgB,EAAE3C,MAAM,CAAC4C,iBAAP,GAA2B5C,MAAM,CAAC4C,iBAAP,CAAyBJ,KAAzB,CAA+B,IAA/B,CAA3B,GAAkE,EA/B/E;AAgCLK,cAAAA,mBAAmB,EAAE7C,MAAM,CAAC8C,oBAAP,GAA8B9C,MAAM,CAAC8C,oBAAP,CAA4BN,KAA5B,CAAkC,IAAlC,CAA9B,GAAwE,EAhCxF;AAiCLO,cAAAA,MAAM,EAAE/C,MAAM,CAAC+C,MAAP,GAAgB/C,MAAM,CAAC+C,MAAP,CAAcP,KAAd,CAAoB,IAApB,CAAhB,GAA4C,EAjC/C;AAkCLQ,cAAAA,OAAO,EAAEhD,MAAM,CAACgD,OAAP,GAAiBhD,MAAM,CAACgD,OAAxB,GAAkC,EAlCtC;AAmCLC,cAAAA,gBAAgB,EAAEjD,MAAM,CAACkD,iBAAP,GAA2BlD,MAAM,CAACkD,iBAAlC,GAAsD,EAnCnE;AAoCLC,cAAAA,gBAAgB,EAAEnD,MAAM,CAACI,iBAAP,GAA2BJ,MAAM,CAACI,iBAAlC,GAAsD;AApCnE;AADb,WADJ;AA0CH;AACJ,OAlDL;AAmDH,KAEkB;;AAGf,UAAKgD,KAAL,GAAa;AACT9C,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE,IADD;AAEL8C,QAAAA,WAAW,EAAE,IAFR;AAGL7C,QAAAA,IAAI,EAAE,IAHD;AAILC,QAAAA,IAAI,EAAE,IAJD;AAKLC,QAAAA,SAAS,EAAE,IALN;AAMLC,QAAAA,SAAS,EAAE;AACPC,UAAAA,EAAE,EAAE,IADG;AAEPE,UAAAA,EAAE,EAAE,IAFG;AAGPE,UAAAA,KAAK,EAAE;AAHA,SANN;AAWLC,QAAAA,UAAU,EAAE;AACRC,UAAAA,QAAQ,EAAE,IADF;AAERC,UAAAA,SAAS,EAAE,IAFH;AAGRC,UAAAA,YAAY,EAAE,IAHN;AAIRC,UAAAA,YAAY,EAAE,IAJN;AAKRC,UAAAA,MAAM,EAAE,IALA;AAMRC,UAAAA,QAAQ,EAAE;AANF,SAXP;AAmBLC,QAAAA,KAAK,EAAE;AACHC,UAAAA,GAAG,EAAE,IADF;AAEHE,UAAAA,GAAG,EAAE,IAFF;AAGHE,UAAAA,GAAG,EAAE,IAHF;AAIHE,UAAAA,GAAG,EAAE,IAJF;AAKHE,UAAAA,GAAG,EAAE,IALF;AAMHE,UAAAA,GAAG,EAAE;AANF,SAnBF;AA2BLE,QAAAA,MAAM,EAAE,EA3BH;AA4BLC,QAAAA,qBAAqB,EAAE,EA5BlB;AA6BLG,QAAAA,iBAAiB,EAAE,EA7Bd;AA8BLE,QAAAA,gBAAgB,EAAE,EA9Bb;AA+BLE,QAAAA,mBAAmB,EAAE,EA/BhB;AAgCLE,QAAAA,MAAM,EAAE,EAhCH;AAiCLC,QAAAA,OAAO,EAAE,EAjCJ;AAkCLC,QAAAA,gBAAgB,EAAE,EAlCb;AAmCLE,QAAAA,gBAAgB,EAAE;AAnCb;AADA,KAAb;AAHe;AA0ClB;;;;6BAGQ;AACL,aACI;AAAK,QAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AACI,QAAA,OAAO,EAAE,KAAKC,KAAL,CAAW9C,OAAX,CAAmBC,IADhC;AAEI,QAAA,WAAW,EAAE,KAAK6C,KAAL,CAAW9C,OAAX,CAAmB+C,WAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,SAAD;AACI,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAW9C,OADxB;AAEI,QAAA,OAAO,EAAE,KAAK8C,KAAL,CAAW9C,OAAX,CAAmB0C,OAFhC;AAGI,QAAA,gBAAgB,EAAE,KAAKI,KAAL,CAAW9C,OAAX,CAAmB2C,gBAHzC;AAII,QAAA,gBAAgB,EAAE,KAAKG,KAAL,CAAW9C,OAAX,CAAmB6C,gBAJzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAWI,oBAAC,WAAD;AAAa,QAAA,YAAY,EAAE,KAAKhE,UAAL,CAAgBmE,IAAhB,CAAqB,IAArB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,CADJ;AAeH;;;;EAxHczE,KAAK,CAAC0E,S;;AA2HzB,eAAetE,IAAf","sourcesContent":["import React from \"react\";\nimport SubjectCard from \"./SubjectCard\";\nimport StatBlock from \"./StatBlock\";\nimport ActionBlock from \"./ActionBlock\";\n\nclass Grid extends React.Component{\n\n    getMonster = (event) => {\n        let searchTerm = event.target.value;\n        searchTerm = searchTerm.replace(/\\b\\w/gm, char => char.toUpperCase());\n\n        fetch(\"https://api-beta.open5e.com/monsters/?name=\" + searchTerm)\n            .then(data => {return data.json()})\n            .then(response => {\n\n                const result = response.results[0];\n                if(result){\n                    console.log(result.special_abilities);\n                    this.setState(\n                        {\n                            subject: {\n                                name: result.name,\n                                type: result.type,\n                                size: result.size,\n                                alignment: result.alignment,\n                                baseStats: {\n                                    ac: result.armor_class,\n                                    hp: result.hit_points,\n                                    speed: result.speed\n                                },\n                                attributes: {\n                                    strength: result.strength,\n                                    dexterity: result.dexterity,\n                                    constitution: result.constitution,\n                                    intelligence: result.intelligence,\n                                    wisdom: result.wisdom,\n                                    charisma: result.charisma,\n                                },\n                                saves: {\n                                    str: result.strength_save,\n                                    dex: result.dexterity_save,\n                                    con: result.constitution_save,\n                                    int: result.intelligence_save,\n                                    wis: result.wisdom_save,\n                                    cha: result.charisma_save\n                                },\n                                skills: {\n                                    //todo figure out how to parse out the skills since they are not separated\n                                },\n                                damageVulnerabilities: result.damage_vulnerabilities ? result.damage_vulnerabilities.split(\", \") : [],\n                                damageResistances: result.damage_resistances ? result.damage_resistances.split(\", \") : [],\n                                damageImmunities: result.damage_immunities ? result.damage_immunities.split(\", \") : [],\n                                conditionImmunities: result.condition_immunities ? result.condition_immunities.split(\", \") : [],\n                                senses: result.senses ? result.senses.split(\", \") : [],\n                                actions: result.actions ? result.actions : [],\n                                legendaryActions: result.legendary_actions ? result.legendary_actions : [],\n                                specialAbilities: result.special_abilities ? result.special_abilities : [],\n                            }\n                        }\n                    )\n                }\n            })\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            subject: {\n                name: null,\n                description: null,\n                type: null,\n                size: null,\n                alignment: null,\n                baseStats: {\n                    ac: null,\n                    hp: null,\n                    speed: null\n                },\n                attributes: {\n                    strength: null,\n                    dexterity: null,\n                    constitution: null,\n                    intelligence: null,\n                    wisdom: null,\n                    charisma: null,\n                },\n                saves: {\n                    str: null,\n                    dex: null,\n                    con: null,\n                    int: null,\n                    wis: null,\n                    cha: null\n                },\n                skills: {},\n                damageVulnerabilities: [],\n                damageResistances: [],\n                damageImmunities: [],\n                conditionImmunities: [],\n                senses: [],\n                actions: [],\n                legendaryActions: [],\n                specialAbilities: []\n            },\n        };\n    }\n\n\n    render (){\n        return (\n            <div className={\"grid\"}>\n                <SubjectCard\n                    subject={this.state.subject.name}\n                    subjectBody={this.state.subject.description}\n                />\n                <StatBlock\n                    subject={this.state.subject}\n                    actions={this.state.subject.actions}\n                    legendaryActions={this.state.subject.legendaryActions}\n                    specialAbilities={this.state.subject.specialAbilities}\n                />\n                <ActionBlock handleSearch={this.getMonster.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}